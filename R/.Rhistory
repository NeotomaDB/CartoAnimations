load("/Users/sydneywidell/Desktop/DataForSyd/NorthAmericaMammalSites.RData")
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
install.packages(rgdal)
install.package(rgdal)
install(rgdal)
install.packages(Rtools)
minimized = FALSE, invisible = TRUE, timeout = 0)
?Rtools
??Rtools
??
R.Version()
?R.Version()
R.Version()
load(Rtools)
install.packages(Rtools)
install.packages(devtools)
install.packages("Rtools")
install.packages("devtools")
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("Rtools")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal",repos="http://www.stats.ox.ac.uk/pub/RWin")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(Rtools)
library(devtools)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("gdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("gdal")
setRepositories()
install.packages(rgdal)
install.packages("rgdal")
ap <- available.packages(rgdal)
install.packages(RCurl)
install.packages("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
sudo apt install libcurl4-openssl-dev
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.package("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("fortunes")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("cowsay")
#system2(command, args = character(),
#stdout = "", stderr = "", stdin = "", input = NULL,
# env = character(), wait = TRUE,
# minimized = FALSE, invisible = TRUE, timeout = 0))
updateR()
??update
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("cowsay")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("devtools")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rdgal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("gdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("GDAL")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("Gdal")
install.packages('rgdal', type = "source", configure.args=c(
'--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config',
'--with-proj-include=/Library/Frameworks/PROJ.framework/Headers',
'--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
library(rgdal)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages(DT)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("DT")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("CartoDB_1.4.tar.gz", repos=NULL, type="source")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install_github("cartodb-r", "Vizzuality")
library(RCurl)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install_github("sf")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("sf")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("cartography")
apt-get install apt-file
sudo apt-get install libproj-dev
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages(‘rgdal’,repos=”http://www.stats.ox.ac.uk/pub/RWin“)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("sp")
library(sp)
require(sp)
install.packages(rdgal)
install.packages("rdgal")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages("CartoDB_1.4.tar.gz", repos=NULL, type="source")
install_github("cartodb-r", "Vizzuality")
library(devtools)
install_github("cartodb-r", "Vizzuality")
install_github("Vizzuality/cartodb-r/CartoDB")
library(RCurl)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
library(RCurl)
cartodb.test()
#Connect to Carto
cartodb("widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
?cartodb
??cartodb
#Connect to Carto
cartodb("widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
library(CartoDB)
library(RCurl)
#SW added, 3/11 for using the cartodb-r package
library(RJSONIO)
library(devtools)
library(RCurl)
library(CartoDB)
#Connect to Carto
cartodb("widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
cartodb.test()
cartodb.test()
#Connect to Carto
cartodb("wisc.carto.com/u/widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
cartodb.test()
cartodb.test()
cartodb.test()
?file(con,"r")
cartodb.test()
cartodb.test()
devtools::install_github("dracodoc/rCartoAPI")
file.edit("~/.Renviron")
setup-key()
setup_key()
library(RCartoAPI)
library(rCartoAPI)
?rCartoAPI::setup_key
file.edit("~/.Renviron")
run setup_key()
setup_key()
library(neotoma)
library(dplyr)
library(httr)
#SW added, 3/11 for using the r2carto package (https://dracodoc.github.io/rCartoAPI/)
library(devtools)
library(rCartoAPI)
file.edit("~/.Renviron")
setup_key()
library(rCartoAPI)
library(devtools)
library(rCartoAPI)
?local import
?local_import
library(devtools)
library(rCartoAPI)
file.edit("~/.Renviron")
setup_key()
library(devtools)
library(rCartoAPI)
carto_acc = "widell"
carto_api_key = "7de5ebf57ee0f31ed45302fb9c0b3a90723921ae"
setup_key()
?rCartoAPI::setup_key
library(devtools)
library(rCartoAPI)
carto_acc = "wisc"
carto_api_key = "7de5ebf57ee0f31ed45302fb9c0b3a90723921ae"
setup_key()
local_import(inputFile) <- "~/Desktop/Github/CartoAnimations/CSVs/CartoInput_Aus.csv"
local_import(inputFile)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?curl_fetch_memory(url, handle = handle)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?local_import
??local_import
??setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?carto_setup
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
library(rgdal)
library(rmarkdown)
render('Pollen_Mapper.Rmd')
library(rmarkdown)
render('Pollen_Mapper.Rmd')
library(rmarkdown)
render('Pollen_Mapper.Rmd')
#library(rmarkdown)
#render('Pollen_Mapper.Rmd')
library(neotoma)
library(dplyr)
library(httr)
library(devtools)
library(rCartoAPI)
species_datasets <- get_dataset(taxonname = 'Taxon*',
#  loc = c(add coordinates),
#  ageyoung = set age,
#  ageold = set age)
)
taxon_dataset_numbers <- as.numeric(names(taxon_datasets))
site_dataset_numbers = list()
site_dataset_numbers <- append(site_dataset_numbers, c(taxon_dataset_numbers))
species_datasets <- get_dataset(taxonname = 'Picea*',
#  loc = c(add coordinates),
#  ageyoung = set age,
#  ageold = set age)
)
#species_datasets <- get_dataset(taxonname = 'Picea*',
#  loc = c(add coordinates),
#  ageyoung = set age,
#  ageold = set age))
#picea_dataset_numbers <- as.numeric(names(picea_datasets))
#species_datasets <- get_dataset(taxonname = 'Taxon*',
#  loc = c(add coordinates),
#  ageyoung = set age,
#  ageold = set age))
#taxon_dataset_numbers <- as.numeric(names(taxon_datasets))
#species_datasets <- get_dataset(taxonname = 'Taxon*',
#  loc = c(add coordinates),
#  ageyoung = set age,
#  ageold = set age))
#taxon_dataset_numbers <- as.numeric(names(taxon_datasets))
species_datasets <- get_dataset(taxonname = 'Picea*',
loc = c(-130, 24, -34, 65),
ageyoung = 0,
ageold = -21,000)
picea_datasets <- get_dataset(taxonname = 'Picea*',
loc = c(-130, 24, -34, 65),
ageyoung = 0,
ageold = -21000)
picea_datasets <- get_dataset(taxonname = 'Picea*',
loc = c(-130, 24, -34, 65),
ageyoung = 0,
ageold = 21000)
#can_datasets <- neotoma::get_dataset(datasettype = 'pollen',
#ageold = 15000, ageyoung = -100,
#gpid = "Canada")
picea_dataset_numbers <- as.numeric(names(picea_datasets))
site_dataset_numbers = list()
site_dataset_numbers <- append(site_dataset_numbers, c(picea_dataset_numbers))
all_dataset_numbers <- as.numeric(unique(site_dataset_numbers))
data_downloads <- get_download(all_dataset_numbers)
timefltr_output <- dplyr::filter (interp_dl, time >= -21000, time < 0)
final_output <- na.omit(timefltr_output)
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
taxon = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE)/tot_cnts)
group_by(time, lat, long, site.name) %>%
summarize( species = mean (picea) * 100)
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
picea = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE)/tot_cnts)
group_by(time, lat, long, site.name) %>%
summarize( species = mean (picea) * 100)
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
picea = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE)/tot_cnts)
group_by(time, lat, long, site.name) %>%
summarize( picea = mean (picea) * 100)
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
picea = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts)
group_by(time, lat, long, site.name) %>%
summarize( picea = mean (picea) * 100)
# Removes any observations from over 21,000 years ago
timefltr_output <- dplyr::filter(interp_dl, time >= -21000)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothofagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#callitris = rowSums(comp_dl[, grep("Callitris*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100,
phyllocladus = mean ( phyllocladus) * 100,
casuarina = mean (casuarina) * 100,
# callitris = mean (callitris) * 100,
eucalyptus = mean (eucalyptus) * 100)
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
picea = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts)
#group_by(time, lat, long, site.name) %>%
summarize(picea = mean (picea) * 100)
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
picea = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts)
#group_by(time, lat, long, site.name) %>%
summarize(picea = mean(picea) * 100)
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
picea = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts)
#group_by(time, lat, long, site.name) %>%
#summarize(picea = mean(picea) * 100)
timefltr_output <- dplyr::filter (interp_dl, time >= -21000, time < 0)
final_output <- na.omit(timefltr_output)
#write.csv(final_output, file = "FILE_PATH.csv")
#inputFile <- "FILE_PATH.csv"
#This section posts the file you just created and saved locally to R
#your carto info
#carto_acc = "username"
#carto_api = "api key"
#optional:
#test_connection()
#Post the file!
#local_import(inputFile)
#tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
#interp_dl <- data.frame(comp_dl[,1:10],
#time = - (round(comp_dl$age / 500, 0) * 500),
#picea = rowSums(comp_dl[, grep("Picea*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts)
#group_by(time, lat, long, site.name) %>%
#summarize(picea = mean(picea) * 100)
#timefltr_output <- dplyr::filter (interp_dl, time >= -21000, time < 0)
#final_output <- na.omit(timefltr_output)
#picea_datasets <- get_dataset(taxonname = 'Picea*',
# loc = c(-130, 24, -34, 65),
#  ageyoung = 0,
#  ageold = 21000)
#can_datasets <- neotoma::get_dataset(datasettype = 'pollen',
#ageold = 15000, ageyoung = -100,
#gpid = "Canada")
#picea_dataset_numbers <- as.numeric(names(picea_datasets))
#picea_datasets <- get_dataset(taxonname = 'Picea*',
# loc = c(-130, 24, -34, 65),
#  ageyoung = 0,
#  ageold = 21000)
#can_datasets <- neotoma::get_dataset(datasettype = 'pollen',
#ageold = 15000, ageyoung = -100,
#gpid = "Canada")
#picea_dataset_numbers <- as.numeric(names(picea_datasets))
#picea_datasets <- get_dataset(taxonname = 'Picea*',
# loc = c(-130, 24, -34, 65),
#  ageyoung = 0,
#  ageold = 21000)
#can_datasets <- neotoma::get_dataset(datasettype = 'pollen',
#ageold = 15000, ageyoung = -100,
#gpid = "Canada")
#picea_dataset_numbers <- as.numeric(names(picea_datasets))
#picea_datasets <- get_dataset(taxonname = 'Picea*',
# loc = c(-130, 24, -34, 65),
#  ageyoung = 0,
#  ageold = 21000)
#can_datasets <- neotoma::get_dataset(datasettype = 'pollen',
#ageold = 15000, ageyoung = -100,
#gpid = "Canada")
#picea_dataset_numbers <- as.numeric(names(picea_datasets))
#library(neotoma)
#library(dplyr)
#library(httr)
#library(devtools)
#library(rCartoAPI)
#taxon_datasets <- get_dataset(taxonname = 'Taxon*',
# loc = c(-130, 24, -34, 65),
#  ageyoung = 0,
#  ageold = 21000)
#can_datasets <- neotoma::get_dataset(datasettype = 'pollen',
#ageold = 15000, ageyoung = -100,
#gpid = "Canada")
#taxon_dataset_numbers <- as.numeric(names(taxon_datasets))
#site_dataset_numbers = list()
#site_dataset_numbers <- append(site_dataset_numbers, c(taxon_dataset_numbers))
#all_dataset_numbers <- as.numeric(unique(site_dataset_numbers))
#data_downloads <- get_download(all_dataset_numbers)
#saveRDS(data_downloads, file = "FILE_PATH")
#site_dataset_numbers = list()
#site_dataset_numbers <- append(site_dataset_numbers, c(taxon_dataset_numbers))
#all_dataset_numbers <- as.numeric(unique(site_dataset_numbers))
#data_downloads <- get_download(all_dataset_numbers)
#saveRDS(data_downloads, file = "FILE_PATH")
#site_dataset_numbers = list()
#site_dataset_numbers <- append(site_dataset_numbers, c(taxon_dataset_numbers))
#all_dataset_numbers <- as.numeric(unique(site_dataset_numbers))
#data_downloads <- get_download(all_dataset_numbers)
#saveRDS(data_downloads, file = "FILE_PATH")
#site_dataset_numbers = list()
#site_dataset_numbers <- append(site_dataset_numbers, c(taxon_dataset_numbers))
#all_dataset_numbers <- as.numeric(unique(site_dataset_numbers))
#data_downloads <- get_download(all_dataset_numbers)
#saveRDS(data_downloads, file = "FILE_PATH")
library(rmarkdown)
render('Pollen_Mapper.Rmd')
source('~/Desktop/Github/CartoAnimations/R/NAmerica.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/NAmerica.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/NAmerica.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/NAmerica.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/NAmerica.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_NA.R', echo=TRUE)
