ageold = 21000)
# Creates list of callitris dataset numbers
cupressaceae_dataset_numbers <- as.numeric(names(cupressaceae_datasets))
View(cupressaceae_datasets)
View(cupressaceae_datasets[["3052"]][["dataset.meta"]])
View(cupressaceae_datasets[["3052"]][["site.data"]])
cupressaceae_datasets[["3052"]][["pi.data"]]
cupressaceae_datasets[["3052"]][["submission"]][["submission.type"]]
cupressaceae_datasets[["3052"]][["site.data"]][["long.acc"]]
get_download(cupressaceae_datasets)
get_download(cupressaceae_dataset_numbers)
cupressaceae_datasets[["18104"]][["site.data"]]
cupressaceae_downloads <- get_download(cupressaceae_dataset_numbers)
cupressaceae_downloads
View(cupressaceae_downloads)
cupressaceae_downloads[["3052"]][["counts"]]
cupressaceae_downloads[["3052"]][["taxon.list"]][["taxon.name"]]
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation.R', echo=TRUE)
# Loads downloaded RData object
# See downloadDatasets.R to download datasets
load("/Users/sydneywidell/Desktop/DataForSyd/Australia_sites.RData")
# Loads downloaded RData object
# See downloadDatasets.R to download datasets
load("/Desktop/DataForSyd/Australia_sites.RData")
load("/Users/sydneywidell/Desktop/DataForSyd/Australia_sites.RData")
source('~/Desktop/Github/CartoAnimations/R/Australia.R', echo=TRUE)
# Saves datasets as an R dataset file
# So you won't have to redownload all the sites
saveRDS(tree_downloads, file = "sydneywidell/Desktop/DataForSyd/Australia_sites.RData")
? saveRDS
# Saves datasets as an R dataset file
# So you won't have to redownload all the sites
saveRDS(tree_downloads, file = "~/Desktop/DataForSyd/Australia_sites.RData")
# Loads downloaded RData object
# See downloadDatasets.R to download datasets
load("~/Desktop/DataForSyd/Australia_sites.RData")
# Loads downloaded RData object
# See downloadDatasets.R to download datasets
source("~/Desktop/DataForSyd/Australia_sites.RData")
# Loads downloaded RData object
# See downloadDatasets.R to download datasets
source("~/Desktop/DataForSyd/Australia_sites.RData")
# Saves datasets as an R dataset file
# So you won't have to redownload all the sites
saveRDS(tree_downloads, file = "~/Desktop/DataForSyd/Australia_sites.RData")
# Loads downloaded RData object
# See downloadDatasets.R to download datasets
source("~/Desktop/DataForSyd/Australia_sites.RData")
?source
saveRDS(tree_downloads, file = "Australia_sites.RData")
source("Australia_sites.RData")
load("Australia_sites.RData")
View(tree_downloads)
# Saves datasets as an R dataset file
# So you won't have to redownload all the sites
saveRDS(tree_downloads, file = "~/Desktop/DataForSyd/Australia_sites.RData")
readRDS("~/Desktop/DataForSyd/Australia_sites.RData")
readRDS("~/Desktop/DataForSyd/Australia_sites.RData")
tree_downloads <- readRDS("~/Desktop/DataForSyd/Australia_sites.RData")
# Creates one spreadsheet of all downloads
comp_dl <- compile_downloads(tree_downloads)
# Gets total counts for each observation at each site
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100,  phyllocladus = mean ( phyllocladus) * 100)
# Australian pollen taxa: Nothofagus, Eucalyptus, Casuarina, (Callitris), Phyllocladus
# Linearly interpolates each taxa in bins of 500 years
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100,  phyllocladus = mean ( phyllocladus) * 100)
# Australian pollen taxa: Nothofagus, Eucalyptus, Casuarina, (Callitris), Phyllocladus
# Linearly interpolates each taxa in bins of 500 years
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100,  phyllocladus = mean ( phyllocladus) * 100)
# Australian pollen taxa: Nothofagus, Eucalyptus, Casuarina, (Callitris), Phyllocladus
# Linearly interpolates each taxa in bins of 500 years
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100,  phyllocladus = mean ( phyllocladus) * 100)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation.R', echo=TRUE)
View(comp_dl)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100,  phyllocladus = mean ( phyllocladus) * 100)
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts
comp_dl[, grep("Eucalyptus*", colnames(comp_dl))]
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100,  phyllocladus = mean ( phyllocladus) * 100)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100,  phyllocladus = mean ( phyllocladus) * 100)
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothoagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, phyllocladus = mean ( phyllocladus) * 100) #eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100)
View(interp_dl)
# Removes any observations from over 21,000 years ago
timefltr_output <- dplyr::filter(interp_dl, time >= -21000)
final_output <- na.omit(timefltr_output)
# Writes CSV file
# Specify location of file via a file path, i.e. file = "home/Code/CartoInputFile"
write.csv(final_output, file = "CartoInput_NA_V3.csv")
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothofagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, phyllocladus = mean ( phyllocladus) * 100) #eucalyptus = mean (eucalyptus) * 100, casuarina = mean (casuarina) * 100)
# Removes any observations from over 21,000 years ago
timefltr_output <- dplyr::filter(interp_dl, time >= -21000)
final_output <- na.omit(timefltr_output)
# Writes CSV file
# Specify location of file via a file path, i.e. file = "home/Code/CartoInputFile"
write.csv(final_output, file = "CartoInput_NA_V3.csv")
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothofagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, phyllocladus = mean ( phyllocladus) * 100, casuarina = mean (casuarina) * 100) #eucalyptus = mean (eucalyptus) * 100
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothofagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
#casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( nothofagus = mean ( nothofagus) * 100, phyllocladus = mean ( phyllocladus) * 100) #casuarina = mean (casuarina) * 100) #eucalyptus = mean (eucalyptus) * 100
final_output <- na.omit(timefltr_output)
# Writes CSV file
# Specify location of file via a file path, i.e. file = "home/Code/CartoInputFile"
write.csv(final_output, file = "CartoInput_NA_V3.csv")
source('~/Desktop/Github/CartoAnimations/R/Europe.R', echo=TRUE)
# Loads packages
library(neotoma)
# Loads packages
library(neotoma)
# Loads packages
library(neotoma)
# Records dataset metadata for the below taxon in specifiied location and
alnus_datasets <- get_dataset(taxonname = 'Alnus*',
loc = c(-11, 35, 47, 72),
ageyoung = 0,
ageold = 21000)
# Creates list of picea dataset numbers
alnus_dataset_numbers <- as.numeric(names(alnus_datasets))
source('~/Desktop/Github/CartoAnimations/R/Europe.R', echo=TRUE)
library(httr)
tree_downloads <- readRDS("Europe_sites.RData")
# Creates one spreadsheet of all downloads
comp_dl <- compile_downloads(tree_downloads)
# Gets total counts for each observation at each site
tot_cnts <- rowSums(comp_dl[,11:ncol(comp_dl)], na.rm=TRUE)
#resp<-POST(apiurl, body=upload_file("CartoInput_NA_V3.csv"), encode="multipart")
#content(resp)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/neotoma-master.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/Mammal_Interp_NA.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/Mammal_Interp_NA.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/Mammal_Interp_NA.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/Mammal_Interp_NA.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/Mammals_Eur.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/Mammals_Eur.R', echo=TRUE)
load("/Users/sydneywidell/Desktop/DataForSyd/NorthAmericaMammalSites.RData")
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
install.packages(rgdal)
install.package(rgdal)
install(rgdal)
install.packages(Rtools)
minimized = FALSE, invisible = TRUE, timeout = 0)
?Rtools
??Rtools
??
R.Version()
?R.Version()
R.Version()
load(Rtools)
install.packages(Rtools)
install.packages(devtools)
install.packages("Rtools")
install.packages("devtools")
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("Rtools")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal",repos="http://www.stats.ox.ac.uk/pub/RWin")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(Rtools)
library(devtools)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("gdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("gdal")
setRepositories()
install.packages(rgdal)
install.packages("rgdal")
ap <- available.packages(rgdal)
install.packages(RCurl)
install.packages("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
sudo apt install libcurl4-openssl-dev
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.package("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("RCurl")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("fortunes")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("cowsay")
#system2(command, args = character(),
#stdout = "", stderr = "", stdin = "", input = NULL,
# env = character(), wait = TRUE,
# minimized = FALSE, invisible = TRUE, timeout = 0))
updateR()
??update
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("cowsay")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("devtools")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rdgal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("gdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("GDAL")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("Gdal")
install.packages('rgdal', type = "source", configure.args=c(
'--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config',
'--with-proj-include=/Library/Frameworks/PROJ.framework/Headers',
'--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
library(rgdal)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages(DT)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("DT")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("CartoDB_1.4.tar.gz", repos=NULL, type="source")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install_github("cartodb-r", "Vizzuality")
library(RCurl)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install_github("sf")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("sf")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("cartography")
apt-get install apt-file
sudo apt-get install libproj-dev
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages(‘rgdal’,repos=”http://www.stats.ox.ac.uk/pub/RWin“)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("rgdal")
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
install.packages("sp")
library(sp)
require(sp)
install.packages(rdgal)
install.packages("rdgal")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages("CartoDB_1.4.tar.gz", repos=NULL, type="source")
install_github("cartodb-r", "Vizzuality")
library(devtools)
install_github("cartodb-r", "Vizzuality")
install_github("Vizzuality/cartodb-r/CartoDB")
library(RCurl)
# This code does linearly interpolates taxa data downloaded from Neotoma
# Written by Anna George, 2019
#Australia, by syd, 2/1
#added upload 2/25, syd
library(RCurl)
cartodb.test()
#Connect to Carto
cartodb("widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
?cartodb
??cartodb
#Connect to Carto
cartodb("widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
library(CartoDB)
library(RCurl)
#SW added, 3/11 for using the cartodb-r package
library(RJSONIO)
library(devtools)
library(RCurl)
library(CartoDB)
#Connect to Carto
cartodb("widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
cartodb.test()
cartodb.test()
#Connect to Carto
cartodb("wisc.carto.com/u/widell", api.key="7de5ebf57ee0f31ed45302fb9c0b3a90723921ae")
cartodb.test()
cartodb.test()
cartodb.test()
?file(con,"r")
cartodb.test()
cartodb.test()
devtools::install_github("dracodoc/rCartoAPI")
file.edit("~/.Renviron")
setup-key()
setup_key()
library(RCartoAPI)
library(rCartoAPI)
?rCartoAPI::setup_key
file.edit("~/.Renviron")
run setup_key()
setup_key()
library(neotoma)
library(dplyr)
library(httr)
#SW added, 3/11 for using the r2carto package (https://dracodoc.github.io/rCartoAPI/)
library(devtools)
library(rCartoAPI)
file.edit("~/.Renviron")
setup_key()
library(rCartoAPI)
library(devtools)
library(rCartoAPI)
?local import
?local_import
library(devtools)
library(rCartoAPI)
file.edit("~/.Renviron")
setup_key()
library(devtools)
library(rCartoAPI)
carto_acc = "widell"
carto_api_key = "7de5ebf57ee0f31ed45302fb9c0b3a90723921ae"
setup_key()
?rCartoAPI::setup_key
library(devtools)
library(rCartoAPI)
carto_acc = "wisc"
carto_api_key = "7de5ebf57ee0f31ed45302fb9c0b3a90723921ae"
setup_key()
local_import(inputFile) <- "~/Desktop/Github/CartoAnimations/CSVs/CartoInput_Aus.csv"
local_import(inputFile)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?curl_fetch_memory(url, handle = handle)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?local_import
??local_import
??setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
?carto_setup
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
setup_key()
source('~/Desktop/Github/CartoAnimations/R/linearInterpolation_Aus.R', echo=TRUE)
library(rgdal)
