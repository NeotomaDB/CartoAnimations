Picea = mean (picea) * 100,
Quercus = mean (quercus) * 100)
tot.cnts <- rowSums(pollen.comp.clean[,11:ncol(pollen.comp.clean)], na.rm=TRUE)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
alnus = rowSums(pollen.comp.clean[, grep("Alnus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
fagus = rowSums(pollen.comp.clean[, grep("Fagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
picea = rowSums(pollen.comp.clean[, grep("Picea*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
quercus = rowSums(pollen.comp.clean[, grep("Quercus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts) %>%
dplyr::group_by(time, lat, long, site.name) %>%
summarize( Fagus   = mean(fagus)   * 100,
Alnus   = mean(alnus)   * 100,
Picea   = mean(picea)   * 100,
Quercus = mean(quercus) * 100)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
alnus = rowSums(pollen.comp.clean[, grep("Alnus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
fagus = rowSums(pollen.comp.clean[, grep("Fagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
picea = rowSums(pollen.comp.clean[, grep("Picea*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
quercus = rowSums(pollen.comp.clean[, grep("Quercus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts) %>%
dplyr::group_by(time, lat, long, site.name) %>%
summarize( Fagus   = mean(fagus)   * 100,
Alnus   = mean(alnus)   * 100,
Picea   = mean(picea)   * 100,
Quercus = mean(quercus) * 100)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
alnus = rowSums(pollen.comp.clean[, grep("Alnus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
fagus = rowSums(pollen.comp.clean[, grep("Fagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
picea = rowSums(pollen.comp.clean[, grep("Picea*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
quercus = rowSums(pollen.comp.clean[, grep("Quercus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts) %>%
dplyr::group_by(time, lat, long, site.name) %>%
summarize( Fagus   = mean(fagus)   * 100,
Alnus   = mean(alnus)   * 100,
Picea   = mean(picea)   * 100,
Quercus = mean(quercus) * 100)
View(interp_dl)
common <- c('Beech', 'Alder', 'Spruce', 'Oak')
plant.data <- data.frame()
for (i in 1:length(common)) {
taxon = common[i]
samples = interp_dl[,i+4]
names(samples) <- "samples"
taxa = rep(taxon,nrow(samples))
current.taxon.data <- cbind(interp_dl[,1:4],samples,taxa)
plant.data <- rbind(plant.data,current.taxon.data)
}
View(plant.data)
colnames(plant.data)[colnames(plant.data) == '...6'] <- 'taxa'
plant.data <- plant.data[order(plant.data$site.name,plant.data$time),]
plant.data <- plant.data[order(plant.data$time,plant.data$site.name),]
# Removes any observations from over 21,000 years ago
timefltr_output <- dplyr::filter(plant.data, time >= -21000)
final_output <- na.omit(timefltr_output)
final.output.no0 <- final_output[final_output$samples != 0,]
write.csv(final_output, file = "~/Github/CartoAnimations/other-files/CSVs/CartoInput_Euro_V2.csv")
write.csv(final.output.no0, file = "~/Github/CartoAnimations/other-files/CSVs/CartoInput_Euro_V2_no0.csv")
# Set your taxa, location, and time period of interest
taxa <- c('Nothofagus*','Eucalyptus*', 'Casuarina*', 'Cupressaceae*')
#  c('Alnus', 'Ambrosia', 'Cyperaceae', 'Fagus', 'Picea', 'Pinus', 'Poaceae', 'Quercus', 'Tsuga', 'Ulmus')
#  c('Alnus', 'Fagus', 'Picea', 'Quercus')
location <- c(105, -51, 177, 10)
#c(-130, 24, -34, 65)
#c(-11, 35, 47, 72)
#c(105, -51, 177, 10)
age.young <- 0
age.old <- 21000
taxa.Datasets <- list()
# Set your taxa, location, and time period of interest
taxa <- c('Nothofagus','Eucalyptus', 'Casuarina', 'Cupressaceae')
# Get dataset information for all taxa
for (i in 1:length(taxa)){
taxa.Datasets <- append(taxa.Datasets,(get_dataset(taxonname = paste0(taxa[i],"*"),
loc = location,
ageyoung = age.young,
ageold = age.old)))
}
dataset.numbers <- unique(as.numeric(names(taxa.Datasets)))
pollen.download <- get_download(dataset.numbers)
saveRDS(pollen.download, file = "PollenAus-21.RData")
pollen.comp <- compile_downloads(pollen.download)
pollen.comp.clean <- pollen.comp[pollen.comp$date.type != "Radiocarbon years BP",]
tot.cnts <- rowSums(pollen.comp.clean[,11:ncol(pollen.comp.clean)], na.rm=TRUE)
get_dataset(taxonname = "Callitris*",                                 loc = location,
ageyoung = age.young,
ageold = age.old))
get_dataset(taxonname = "Callitris*",                                 loc = location,
ageyoung = age.young,
ageold = age.old)
# Set your taxa, location, and time period of interest
taxa <- c('Nothofagus','Eucalyptus', 'Casuarina', 'Cupressaceae', 'Callitris')
taxa.Datasets <- list()
# Get dataset information for all taxa
for (i in 1:length(taxa)){
taxa.Datasets <- append(taxa.Datasets,(get_dataset(taxonname = paste0(taxa[i],"*"),
loc = location,
ageyoung = age.young,
ageold = age.old)))
}
dataset.numbers <- unique(as.numeric(names(taxa.Datasets)))
interp_dl <- data.frame(comp_dl[,1:10],
time = - (round(comp_dl$age / 500, 0) * 500),
nothofagus = rowSums(comp_dl[, grep("Nothofagus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(comp_dl[, grep("Eucalyptus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(comp_dl[, grep("Casuarina*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
callitris = rowSums(comp_dl[, grep("Callitris*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(comp_dl[, grep("Phyllocladus*", colnames(comp_dl))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( Nothofagus = mean ( nothofagus) * 100,
Phyllocladus = mean ( phyllocladus) * 100,
Casuarina = mean (casuarina) * 100,
# callitris = mean (callitris) * 100,
Eucalyptus = mean (eucalyptus) * 100)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
nothofagus = rowSums(pollen.comp.clean[, grep("Nothofagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
eucalyptus = rowSums(pollen.comp.clean[, grep("Eucalyptus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
casuarina = rowSums(pollen.comp.clean[, grep("Casuarina*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
callitris = rowSums(pollen.comp.clean[, grep("Callitris*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts,
phyllocladus = rowSums(pollen.comp.clean[, grep("Phyllocladus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot_cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( Nothofagus = mean ( nothofagus) * 100,
Phyllocladus = mean ( phyllocladus) * 100,
Casuarina = mean (casuarina) * 100,
# callitris = mean (callitris) * 100,
Eucalyptus = mean (eucalyptus) * 100)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
nothofagus = rowSums(pollen.comp.clean[, grep("Nothofagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
eucalyptus = rowSums(pollen.comp.clean[, grep("Eucalyptus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
casuarina = rowSums(pollen.comp.clean[, grep("Casuarina*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
callitris = rowSums(pollen.comp.clean[, grep("Callitris*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
phyllocladus = rowSums(pollen.comp.clean[, grep("Phyllocladus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( Nothofagus = mean ( nothofagus) * 100,
Phyllocladus = mean ( phyllocladus) * 100,
Casuarina = mean (casuarina) * 100,
# callitris = mean (callitris) * 100,
Eucalyptus = mean (eucalyptus) * 100)
tot.cnts <- rowSums(pollen.comp.clean[,11:ncol(pollen.comp.clean)], na.rm=TRUE)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
nothofagus = rowSums(pollen.comp.clean[, grep("Nothofagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
eucalyptus = rowSums(pollen.comp.clean[, grep("Eucalyptus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
casuarina = rowSums(pollen.comp.clean[, grep("Casuarina*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
callitris = rowSums(pollen.comp.clean[, grep("Callitris*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
phyllocladus = rowSums(pollen.comp.clean[, grep("Phyllocladus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( Nothofagus = mean ( nothofagus) * 100,
Phyllocladus = mean ( phyllocladus) * 100,
Casuarina = mean (casuarina) * 100,
# callitris = mean (callitris) * 100,
Eucalyptus = mean (eucalyptus) * 100)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
nothofagus = rowSums(pollen.comp.clean[, grep("Nothofagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
eucalyptus = rowSums(pollen.comp.clean[, grep("Eucalyptus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
casuarina = rowSums(pollen.comp.clean[, grep("Casuarina*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
callitris = rowSums(pollen.comp.clean[, grep("Callitris*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
phyllocladus = rowSums(pollen.comp.clean[, grep("Phyllocladus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( Nothofagus = mean ( nothofagus) * 100,
Phyllocladus = mean ( phyllocladus) * 100,
Casuarina = mean (casuarina) * 100,
Callitris = mean (callitris) * 100,
Eucalyptus = mean (eucalyptus) * 100)
pollen.comp.clean[,"Callitris*"]
pollen.comp.clean[,"Callitris"]
rowSums(pollen.comp.clean[,"Callitris"], na.rm = TRUE)
callitris = pollen.comp.clean[,"Callitris"] / tot.cnts
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
nothofagus = rowSums(pollen.comp.clean[, grep("Nothofagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
eucalyptus = rowSums(pollen.comp.clean[, grep("Eucalyptus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
casuarina = rowSums(pollen.comp.clean[, grep("Casuarina*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
callitris = pollen.comp.clean[,"Callitris"] / tot.cnts,
phyllocladus = rowSums(pollen.comp.clean[, grep("Phyllocladus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( Nothofagus = mean ( nothofagus) * 100,
Phyllocladus = mean ( phyllocladus) * 100,
Casuarina = mean (casuarina) * 100,
Callitris = mean (callitris) * 100,
Eucalyptus = mean (eucalyptus) * 100)
common <- c('She-Oak', 'Eucalyptus', 'Beech', 'Celery Pine')
get_dataset(taxonname = "Phyllocladus*",
loc = location,
ageyoung = age.young,
ageold = age.old)
colnames(comp_dl[1, grep("Phyllocladus*", colnames(pollen.comp.clean))])
colnames(pollen.comp.clean[1, grep("Phyllocladus*", colnames(pollen.comp.clean))])
colnames(pollen.comp.clean[1, grep("Cupressaceae*", colnames(pollen.comp.clean))])
get_dataset(taxonname = "Cupressaceae*",
loc = location,
ageyoung = age.young,
ageold = age.old)
# Set your taxa, location, and time period of interest
taxa <- c('Nothofagus','Eucalyptus', 'Casuarina', 'Phyllocladus', 'Callitris')
#  c('Alnus', 'Ambrosia', 'Cyperaceae', 'Fagus', 'Picea', 'Pinus', 'Poaceae', 'Quercus', 'Tsuga', 'Ulmus')
#  c('Alnus', 'Fagus', 'Picea', 'Quercus')
location <- c(105, -51, 177, 10)
#c(-130, 24, -34, 65)
#c(-11, 35, 47, 72)
#c(105, -51, 177, 10)
age.young <- 0
age.old <- 21000
taxa.Datasets <- list()
# Get dataset information for all taxa
for (i in 1:length(taxa)){
taxa.Datasets <- append(taxa.Datasets,(get_dataset(taxonname = paste0(taxa[i],"*"),
loc = location,
ageyoung = age.young,
ageold = age.old)))
}
dataset.numbers <- unique(as.numeric(names(taxa.Datasets)))
pollen.download <- get_download(dataset.numbers)
saveRDS(pollen.download, file = "PollenAus-21.RData")
pollen.comp <- compile_downloads(pollen.download)
pollen.comp.clean <- pollen.comp[pollen.comp$date.type != "Radiocarbon years BP",]
tot.cnts <- rowSums(pollen.comp.clean[,11:ncol(pollen.comp.clean)], na.rm=TRUE)
interp_dl <- data.frame(pollen.comp.clean[,1:10],
time = - (round(pollen.comp.clean$age / 500, 0) * 500),
nothofagus = rowSums(pollen.comp.clean[, grep("Nothofagus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
eucalyptus = rowSums(pollen.comp.clean[, grep("Eucalyptus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
casuarina = rowSums(pollen.comp.clean[, grep("Casuarina*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts,
callitris = pollen.comp.clean[,"Callitris"] / tot.cnts,
phyllocladus = rowSums(pollen.comp.clean[, grep("Phyllocladus*", colnames(pollen.comp.clean))], na.rm = TRUE) / tot.cnts) %>%
group_by(time, lat, long, site.name) %>%
summarize( Nothofagus = mean ( nothofagus) * 100,
Phyllocladus = mean ( phyllocladus) * 100,
Casuarina = mean (casuarina) * 100,
Callitris = mean (callitris) * 100,
Eucalyptus = mean (eucalyptus) * 100)
common <- c('Beech', 'Celery Pine', 'She-Oak', 'Cypress-Pine', 'Eucalyptus')
plant.data <- data.frame()
for (i in 1:length(common)) {
taxon = common[i]
samples = interp_dl[,i+4]
names(samples) <- "samples"
taxa = rep(taxon,nrow(samples))
current.taxon.data <- cbind(interp_dl[,1:4],samples,taxa)
plant.data <- rbind(plant.data,current.taxon.data)
}
colnames(plant.data)[colnames(plant.data) == '...6'] <- 'taxa'
plant.data <- plant.data[order(plant.data$time,plant.data$site.name),]
# Removes any observations from over 21,000 years ago
timefltr_output <- dplyr::filter(plant.data, time >= -21000)
final_output <- na.omit(timefltr_output)
final.output.no0 <- final_output[final_output$samples != 0,]
write.csv(final_output, file = "~/Github/CartoAnimations/other-files/CSVs/CartoInput_Aus_V2.csv")
write.csv(final.output.no0, file = "~/Github/CartoAnimations/other-files/CSVs/CartoInput_Aus_V2_no0.csv")
library(jsonlite)
library(httr)
library(dplyr)
library(purrr)
rawdatasets <- 'https://api.neotomadb.org/v2.0/data/datasets/'
rawdownload <- 'https://api.neotomadb.org/v2.0/data/downloads'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = c(-360, -20, 0, 20)))
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
geography = c(-360, -20, 0, 20)))
c([-360, -20], [0, -20], [0, 20], [-360, 20], [-360, -20])
[[-360, -20], [0, -20], [0, 20], [-360, 20], [-360, -20]]
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = [[-360, -20], [0, -20], [0, 20], [-360, 20], [-360, -20]]))
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = [[-360, -20], [0, -20], [0, 20], [-360, 20], [-360, -20]]))
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = c(-360, -20, 0, 20)))
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = '[[-180, -20], [-180, 20], [180, 20], [180, -20], [-180, -20]]'))
datasets <- content(pollends)$data
View(pollends)
pollenloc <- '{ "type": "Polygon",
"coordinates": [
[-180, -20], [-180, 20], [180, 20], [180, -20], [-180, -20]
]
}'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
allds <- datasets %>% map(function(x) {
datasetids = x$sites$datasets %>%
map(function(x) {
data.frame(dsid = x$datasetid,
dstype = x$datasettype)
}) %>%
bind_rows()
return(datasetids)
}) %>%
bind_rows() %>%
filter(dstype == 'pollen') # just incase.
pollenloc <- 'POLYGON(-180 -20, -180 20, 180 20, 180 -20, -180, -20)'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
pollends[["content"]]
pollenloc <- 'MULTIPOINT(-180 -20, -180 20, 180 20, 180 -20, -180, -20)'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
allds <- datasets %>% map(function(x) {
datasetids = x$sites$datasets %>%
map(function(x) {
data.frame(dsid = x$datasetid,
dstype = x$datasettype)
}) %>%
bind_rows()
return(datasetids)
}) %>%
bind_rows() %>%
filter(dstype == 'pollen') # just incase.
pollenloc <- '[[-180, -20], [-180, 20], [180, 20], [180, -20], [-180, -20]]'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
allds <- datasets %>% map(function(x) {
datasetids = x$sites$datasets %>%
map(function(x) {
data.frame(dsid = x$datasetid,
dstype = x$datasettype)
}) %>%
bind_rows()
return(datasetids)
}) %>%
bind_rows() %>%
filter(dstype == 'pollen') # just incase.
pollenloc <- '[[-180, -20], [-180, 20], [180, 20], [180, -20]]'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
allds <- datasets %>% map(function(x) {
datasetids = x$sites$datasets %>%
map(function(x) {
data.frame(dsid = x$datasetid,
dstype = x$datasettype)
}) %>%
bind_rows()
return(datasetids)
}) %>%
bind_rows() %>%
filter(dstype == 'pollen') # just incase.
pollenloc <- '[-180, -20, 180, 20]'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
allds <- datasets %>% map(function(x) {
datasetids = x$sites$datasets %>%
map(function(x) {
data.frame(dsid = x$datasetid,
dstype = x$datasettype)
}) %>%
bind_rows()
return(datasetids)
}) %>%
bind_rows() %>%
filter(dstype == 'pollen') # just incase.
pollenloc <- '-180, -20, 180, 20'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
content(pollends)
pollenloc <- '{[[-180, -20], [-180, 20], [180, 20], [180, -20], [-180, -20]]}'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
View(pollends)
pollends[["request"]][["url"]]
pollenloc <- '-180, -20, 180, 20'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
pollends[["request"]][["url"]]
pollenloc <- 'c(-180, -20, 180, 20)'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
pollends[["request"]][["url"]]
pollenloc <- '{ "type": "Polygon",
"coordinates": [
[-180, -20], [-180, 20], [180, 20], [180, -20], [-180, -20]
]
}'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
pollends[["request"]][["url"]]
pollenloc <- 'BBOX(-180, -20, 180, 20)'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
pollends[["request"]][["url"]]
pollenloc <- 'BBOX[-180, -20, 180, 20]'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
pollenloc <- 'BBOX[-180, -20, 180, 20]'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
pollends[["request"]][["url"]]
pollenloc <- BBOX[-180, -20, 180, 20]
pollenloc <- 'BBOX[-180,-20,180,20]'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
library(jsonlite)
library(httr)
library(dplyr)
library(purrr)
rawdatasets <- 'https://api.neotomadb.org/v2.0/data/datasets/'
rawdownload <- 'https://api.neotomadb.org/v2.0/data/downloads'
pollenloc <- 'POLYGON[-180 -20,-180 20,180 20,180 -20,-180 -20]'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
content(pollends)
View(pollends)
content(pollends)$url
pollends$url
allds <- datasets %>% map(function(x) {
datasetids = x$sites$datasets %>%
map(function(x) {
data.frame(dsid = x$datasetid,
dstype = x$datasettype)
}) %>%
bind_rows()
return(datasetids)
}) %>%
bind_rows() %>%
filter(dstype == 'pollen') # just incase.
pollenloc <- 'BBOX(-180,-20,180,20)'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
library(jsonlite)
library(httr)
library(dplyr)
library(purrr)
rawdatasets <- 'https://api.neotomadb.org/v2.0/data/datasets/'
rawdownload <- 'https://api.neotomadb.org/v2.0/data/downloads'
pollenloc <- 'BBOX(-180,-20,180,20)'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
pollenloc <- 'MULTIPOLYGON(((180 20,0 20,0 -20,180 -20,180 20), (-180 20,0 20,0 -20,-180 -20,-180 20)))'
rawdatasets <- 'https://api.neotomadb.org/v2.0/data/datasets/'
rawdownload <- 'https://api.neotomadb.org/v2.0/data/downloads'
library(jsonlite)
library(httr)
library(dplyr)
library(purrr)
rawdatasets <- 'https://api.neotomadb.org/v2.0/data/datasets/'
rawdownload <- 'https://api.neotomadb.org/v2.0/data/downloads'
pollenloc <- 'BBOX(-180,-20,180,20)'
pollends <- httr::GET(rawdatasets, query = list(datasettype = 'pollen',
limit = 99999,
offset = 0,
loc = pollenloc))
datasets <- content(pollends)$data
allds <- datasets %>% map(function(x) {
datasetids = x$sites$datasets %>%
map(function(x) {
data.frame(dsid = x$datasetid,
dstype = x$datasettype)
}) %>%
bind_rows()
return(datasetids)
}) %>%
bind_rows() %>%
filter(dstype == 'pollen') # just incase.
